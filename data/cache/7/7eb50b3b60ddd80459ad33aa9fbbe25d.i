a:1322:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"正则表达式";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"这些页包含的信息其目的是提供一个关于正则表达式的通用介绍。";}i:2;i:30;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:250:" 尽管试图让每个主题的内容都比较独立，但这些主题所包含的大部分信息都依赖于对前面所介绍的特性或概念的理解。因此，建议您顺序地仔细阅读这些主题，以便最全面地了解这些材料。";}i:2;i:119;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:369;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:369;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"“正则表达式简介”包括下述各个主题：";}i:2;i:371;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:425;}i:12;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:427;}i:13;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"正则表达式";i:1;i:2;i:2;i:427;}i:2;i:427;}i:14;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:427;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:427;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"如果原来没有使用过正则表达式，那么可能对这个术语和概念会不太熟悉。不过，它们并不是您想象的那么新奇。";}i:2;i:454;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:604;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:604;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"请回想一下在硬盘上是如何查找文件的。您肯定会使用 ? 和 * 字符来帮助查找您正寻找的文件。? 字符匹配文件名中的单个字符，而 * 则匹配一个或多个字符。一个如 'data?.dat' 的模式可以找到下述文件：";}i:2;i:606;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:874;}i:21;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:39:"data1.dat
data2.dat
datax.dat
dataN.dat";}i:2;i:874;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:874;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"如果使用 * 字符代替 ? 字符，则将扩大找到的文件数量。'data*.dat' 可以匹配下述所有文件名：";}i:2;i:924;}i:24;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1048;}i:25;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:61:"data.dat
data1.dat
data2.dat
data12.dat
datax.dat
dataXYZ.dat";}i:2;i:1048;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1048;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"尽管这种搜索文件的方法肯定很有用，但也十分有限。? 和 * 通配符的有限能力可以使你对正则表达式能做什么有一个概念，不过正则表达式的功能更强大，也更灵活。";}i:2;i:1124;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1345;}i:29;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1347;}i:30;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"早期起源";i:1;i:2;i:2;i:1347;}i:2;i:1347;}i:31;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1347;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1347;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"正则表达式的“祖先”可以一直上溯至对人类神经系统如何工作的早期研究。Warren McCulloch 和 Walter Pitts 这两位神经生理学家研究出一种数学方式来描述这些神经网络。";}i:2;i:1371;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1591;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1591;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:339:"1956 年, 一位叫 Stephen Kleene 的美国数学家在 McCulloch 和 Pitts 早期工作的基础上，发表了一篇标题为“神经网事件的表示法”的论文，引入了正则表达式的概念。正则表达式就是用来描述他称为“正则集的代数”的表达式，因此采用“正则表达式”这个术语。 ";}i:2;i:1593;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1932;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1932;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:229:"随后，发现可以将这一工作应用于使用Ken Thompson 的计算搜索算法的一些早期研究，Ken Thompson是Unix 的主要发明人。正则表达式的第一个实用应用程序就是 Unix 中的qed 编辑器。";}i:2;i:1934;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2163;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2163;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"如他们所说，剩下的就是众所周知的历史了。从那时起直至现在正则表达式都是基于文本的编辑器和搜索工具中的一个重要部分。";}i:2;i:2165;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2336;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2339;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"使用正则表达式";i:1;i:2;i:2;i:2339;}i:2;i:2339;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2339;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2339;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"在典型的搜索和替换操作中，必须提供要查找的确切文字。这种技术对于静态文本中的简单搜索和替换任务可能足够了，但是由于它缺乏灵活性，因此在搜索动态文本时就有困难了，甚至是不可能的。 ";}i:2;i:2372;}i:49;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2637;}i:50;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2637;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"使用正则表达式，就可以： ";}i:2;i:2639;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2677;}i:53;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2677;}i:54;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2677;}i:55;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2677;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:208:"测试字符串的某个模式。例如，可以对一个输入字符串进行测试，看在该字符串是否存在一个电话号码模式或一个信用卡号码模式。这称为数据有效性验证。 ";}i:2;i:2681;}i:57;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2889;}i:58;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2889;}i:59;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2889;}i:60;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2889;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"替换文本。可以在文档中使用一个正则表达式来标识特定文字，然后可以全部将其删除，或者替换为别的文字。 ";}i:2;i:2893;}i:62;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3041;}i:63;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3041;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3041;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3041;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"根据模式匹配从字符串中提取一个子字符串。可以用来在文本或输入字段中查找特定文字。 ";}i:2;i:3045;}i:67;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3166;}i:68;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3166;}i:69;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:3166;}i:70;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3166;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"例如，如果需要搜索整个 web 站点来删除某些过时的材料并替换某些HTML 格式化标记，则可以使用正则表达式对每个文件进行测试，看在该文件中是否存在所要查找的材料或 ";}i:2;i:3167;}i:72;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:3394;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:283:" 格式化标记。用这个方法，就可以将受影响的文件范围缩小到包含要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料，最后，可以再次使用正则表达式来查找并替换那些需要替换的标记。";}i:2;i:3398;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3681;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3681;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:456:"另一个说明正则表达式非常有用的示例是一种其字符串处理能力还不为人所知的语言。VBScript 是 Visual Basic 的一个子集，具有丰富的字符串处理功能。与 C 类似的 Jscript 则没有这一能力。正则表达式给 JScript 的字符串处理能力带来了明显改善。不过，可能还是在 VBScript 中使用正则表达式的效率更高，它允许在单个表达式中执行多个字符串操作。";}i:2;i:3683;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4139;}i:78;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4141;}i:79;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"正则表达式语法";i:1;i:2;i:2;i:4141;}i:2;i:4141;}i:80;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4141;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4141;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:"一个正则表达式就是由普通字符（例如字符 a 到 z）以及特殊字符（称为元字符）组成的文字模式。该模式描述在查找文字主体时待匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。";}i:2;i:4174;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4479;}i:84;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4479;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"这里有一些可能会遇到的正则表达式示例：";}i:2;i:4481;}i:86;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4539;}i:87;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:4;i:2;i:4540;}i:2;i:4539;}i:88;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:4539;}i:89;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4539;}i:90;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:4539;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"  JScript  ";}i:2;i:4541;}i:92;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:4552;}i:93;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:4552;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"  VBScript  ";}i:2;i:4553;}i:95;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:4565;}i:96;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:4565;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  匹配  ";}i:2;i:4566;}i:98;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:4576;}i:99;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4577;}i:100;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:4577;}i:101;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4577;}i:102;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4577;}i:103;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:11:"/^\[ \t]*$/";}i:2;i:4587;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4607;}i:105;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4608;}i:106;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4608;}i:107;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:11:""^\[ \t]*$"";}i:2;i:4617;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4637;}i:109;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4638;}i:110;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4638;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"匹配一个空白行。 ";}i:2;i:4639;}i:112;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4664;}i:113;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4665;}i:114;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4665;}i:115;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4665;}i:116;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:13:"/\d{2}-\d{5}/";}i:2;i:4675;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4697;}i:118;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4698;}i:119;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4698;}i:120;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:13:""\d{2}-\d{5}"";}i:2;i:4707;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4729;}i:122;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4730;}i:123;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4730;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"验证一个ID 号码是否由一个2位数字，一个连字符以及一个5位数字组成。 ";}i:2;i:4731;}i:125;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4827;}i:126;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4828;}i:127;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:4828;}i:128;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4828;}i:129;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:16:"/<(.*)>.*<\/\1>/";}i:2;i:4838;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4863;}i:131;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4864;}i:132;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4864;}i:133;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:16:""<(.*)>.*<\/\1>"";}i:2;i:4873;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4898;}i:135;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4899;}i:136;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:4899;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"匹配一个 ";}i:2;i:4900;}i:138;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:4913;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 标记。";}i:2;i:4917;}i:140;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:4927;}i:141;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:4929;}i:142;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:4929;}i:2;i:4929;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4929;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"下表是元字符及其在正则表达式上下文中的行为的一个完整列表：";}i:2;i:4932;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5020;}i:146;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:41;i:2;i:5021;}i:2;i:5020;}i:147;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:5020;}i:148;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5020;}i:149;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:5020;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  字符  ";}i:2;i:5022;}i:151;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5032;}i:152;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:5032;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  描述  ";}i:2;i:5033;}i:154;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:5043;}i:155;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5044;}i:156;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:5044;}i:157;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5044;}i:158;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5044;}i:159;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:5054;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5064;}i:161;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5065;}i:162;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5065;}i:163;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:237:"将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。 ";}i:2;i:5074;}i:164;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5320;}i:165;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5321;}i:166;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5321;}i:167;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5321;}i:168;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"^";}i:2;i:5331;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5341;}i:170;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5342;}i:171;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5342;}i:172;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:136:"匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。 ";}i:2;i:5351;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5496;}i:174;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5497;}i:175;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5497;}i:176;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5497;}i:177;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"$";}i:2;i:5507;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5517;}i:179;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5518;}i:180;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5518;}i:181;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:135:"匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。 ";}i:2;i:5527;}i:182;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5671;}i:183;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5672;}i:184;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5672;}i:185;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5672;}i:186;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"*";}i:2;i:5682;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5692;}i:188;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5693;}i:189;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5693;}i:190;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:107:"匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。 ";}i:2;i:5702;}i:191;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5818;}i:192;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5819;}i:193;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5819;}i:194;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5819;}i:195;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"+";}i:2;i:5829;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5839;}i:197;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5840;}i:198;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5840;}i:199;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:132:"匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。 ";}i:2;i:5849;}i:200;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:5990;}i:201;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:5991;}i:202;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:5991;}i:203;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:5991;}i:204;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"?";}i:2;i:6001;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6011;}i:206;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6012;}i:207;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6012;}i:208;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:128:"匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。 ";}i:2;i:6021;}i:209;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6158;}i:210;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6159;}i:211;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6159;}i:212;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6159;}i:213;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"{n}";}i:2;i:6169;}i:214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6181;}i:215;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6182;}i:216;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6182;}i:217;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:139:"n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。 ";}i:2;i:6191;}i:218;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6339;}i:219;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6340;}i:220;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6340;}i:221;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6340;}i:222;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:4:"{n,}";}i:2;i:6350;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6363;}i:224;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6364;}i:225;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6364;}i:226;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:189:"n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 ";}i:2;i:6373;}i:227;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6571;}i:228;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6572;}i:229;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6572;}i:230;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6572;}i:231;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:5:"{n,m}";}i:2;i:6582;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6596;}i:233;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6597;}i:234;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6597;}i:235;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:224:"m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。刘， "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 ";}i:2;i:6606;}i:236;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6839;}i:237;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:6840;}i:238;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:6840;}i:239;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6840;}i:240;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"?";}i:2;i:6850;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6860;}i:242;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:6861;}i:243;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:6861;}i:244;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:345:"当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。 ";}i:2;i:6870;}i:245;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7224;}i:246;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:7225;}i:247;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:7225;}i:248;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7225;}i:249;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:".";}i:2;i:7235;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7245;}i:251;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7246;}i:252;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7246;}i:253;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:124:"匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。 ";}i:2;i:7255;}i:254;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7388;}i:255;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:7389;}i:256;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:7389;}i:257;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7389;}i:258;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:9:"(pattern)";}i:2;i:7399;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7417;}i:260;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7418;}i:261;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7418;}i:262;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:235:"匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。 ";}i:2;i:7427;}i:263;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7671;}i:264;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:7672;}i:265;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:7672;}i:266;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7672;}i:267;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:11:"(?:pattern)";}i:2;i:7682;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:7702;}i:269;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:7703;}i:270;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:7703;}i:271;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:289:"匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。 ";}i:2;i:7712;}i:272;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8010;}i:273;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8011;}i:274;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8011;}i:275;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8011;}i:276;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:11:"(?=pattern)";}i:2;i:8021;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8041;}i:278;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8042;}i:279;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8042;}i:280;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:484:"正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， 'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 ";}i:2;i:8051;}i:281;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8544;}i:282;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8545;}i:283;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8545;}i:284;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8545;}i:285;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:11:"(?!pattern)";}i:2;i:8555;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8575;}i:287;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8576;}i:288;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8576;}i:289;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:565:"负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始  ";}i:2;i:8585;}i:290;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9159;}i:291;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9160;}i:292;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9160;}i:293;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9160;}i:294;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"x|y";}i:2;i:9170;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9182;}i:296;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9183;}i:297;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9183;}i:298;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:105:"匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。  ";}i:2;i:9192;}i:299;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9306;}i:300;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9307;}i:301;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9307;}i:302;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9307;}i:303;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:5:"[xyz]";}i:2;i:9317;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9331;}i:305;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9332;}i:306;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9332;}i:307;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:108:"字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。  ";}i:2;i:9341;}i:308;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9458;}i:309;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9459;}i:310;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9459;}i:311;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9459;}i:312;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:6:"[^xyz]";}i:2;i:9469;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9484;}i:314;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9485;}i:315;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9485;}i:316;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:108:"负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。  ";}i:2;i:9494;}i:317;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9611;}i:318;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9612;}i:319;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9612;}i:320;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9612;}i:321;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:5:"[a-z]";}i:2;i:9622;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9636;}i:323;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9637;}i:324;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9637;}i:325;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:137:"字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。  ";}i:2;i:9646;}i:326;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9792;}i:327;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9793;}i:328;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9793;}i:329;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9793;}i:330;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:6:"[^a-z]";}i:2;i:9803;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9818;}i:332;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9819;}i:333;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9819;}i:334;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:156:"负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。  ";}i:2;i:9828;}i:335;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9993;}i:336;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9994;}i:337;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9994;}i:338;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9994;}i:339;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\b";}i:2;i:10004;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10015;}i:341;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10016;}i:342;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10016;}i:343;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:159:"匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。  ";}i:2;i:10025;}i:344;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10193;}i:345;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10194;}i:346;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10194;}i:347;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10194;}i:348;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\B";}i:2;i:10204;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10215;}i:350;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10216;}i:351;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10216;}i:352;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:101:"匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。 ";}i:2;i:10225;}i:353;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10335;}i:354;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10336;}i:355;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10336;}i:356;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10336;}i:357;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\cx";}i:2;i:10346;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10358;}i:359;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10359;}i:360;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10359;}i:361;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:178:"匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。  ";}i:2;i:10368;}i:362;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10555;}i:363;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10556;}i:364;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10556;}i:365;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10556;}i:366;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\d";}i:2;i:10566;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10577;}i:368;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10578;}i:369;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10578;}i:370;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:47:"匹配一个数字字符。等价于 [0-9]。  ";}i:2;i:10587;}i:371;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10643;}i:372;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10644;}i:373;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10644;}i:374;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10644;}i:375;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\D";}i:2;i:10654;}i:376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10665;}i:377;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10666;}i:378;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10666;}i:379;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:51:"匹配一个非数字字符。等价于 [^0-9]。  ";}i:2;i:10675;}i:380;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10735;}i:381;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10736;}i:382;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10736;}i:383;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10736;}i:384;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\f";}i:2;i:10746;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10757;}i:386;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10758;}i:387;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10758;}i:388;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个换页符。等价于 \x0c 和 \cL。 ";}i:2;i:10767;}i:389;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10826;}i:390;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10827;}i:391;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10827;}i:392;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10827;}i:393;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\n";}i:2;i:10837;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10848;}i:395;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10849;}i:396;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10849;}i:397;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个换行符。等价于 \x0a 和 \cJ。 ";}i:2;i:10858;}i:398;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10917;}i:399;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10918;}i:400;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10918;}i:401;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10918;}i:402;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\r";}i:2;i:10928;}i:403;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:10939;}i:404;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10940;}i:405;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:10940;}i:406;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个回车符。等价于 \x0d 和 \cM。 ";}i:2;i:10949;}i:407;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11008;}i:408;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11009;}i:409;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11009;}i:410;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11009;}i:411;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\s";}i:2;i:11019;}i:412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11030;}i:413;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11031;}i:414;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11031;}i:415;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:99:"匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 ";}i:2;i:11040;}i:416;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11148;}i:417;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11149;}i:418;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11149;}i:419;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11149;}i:420;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\S";}i:2;i:11159;}i:421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11170;}i:422;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11171;}i:423;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11171;}i:424;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:58:"匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 ";}i:2;i:11180;}i:425;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11247;}i:426;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11248;}i:427;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11248;}i:428;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11248;}i:429;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\t";}i:2;i:11258;}i:430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11269;}i:431;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11270;}i:432;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11270;}i:433;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个制表符。等价于 \x09 和 \cI。 ";}i:2;i:11279;}i:434;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11338;}i:435;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11339;}i:436;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11339;}i:437;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11339;}i:438;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\v";}i:2;i:11349;}i:439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11360;}i:440;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11361;}i:441;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11361;}i:442;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:56:"匹配一个垂直制表符。等价于 \x0b 和 \cK。 ";}i:2;i:11370;}i:443;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11435;}i:444;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11436;}i:445;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11436;}i:446;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11436;}i:447;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\w";}i:2;i:11446;}i:448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11457;}i:449;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11458;}i:450;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11458;}i:451;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:71:"匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。";}i:2;i:11467;}i:452;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11547;}i:453;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11550;}i:454;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11550;}i:455;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11550;}i:456;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\W";}i:2;i:11560;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11571;}i:458;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11572;}i:459;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11572;}i:460;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:60:"匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。  ";}i:2;i:11581;}i:461;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11650;}i:462;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11651;}i:463;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11651;}i:464;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11651;}i:465;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\xn";}i:2;i:11661;}i:466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11673;}i:467;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11674;}i:468;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11674;}i:469;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:218:"匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， '\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。. ";}i:2;i:11683;}i:470;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11910;}i:471;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11911;}i:472;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11911;}i:473;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11911;}i:474;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:4:"\num";}i:2;i:11921;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:11934;}i:476;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11935;}i:477;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:11935;}i:478;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:133:"匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。  ";}i:2;i:11944;}i:479;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12086;}i:480;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:12087;}i:481;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:12087;}i:482;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12087;}i:483;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"\n";}i:2;i:12097;}i:484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12108;}i:485;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12109;}i:486;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12109;}i:487;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:212:"标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 ";}i:2;i:12118;}i:488;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12339;}i:489;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:12340;}i:490;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:12340;}i:491;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12340;}i:492;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\nm";}i:2;i:12350;}i:493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12362;}i:494;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12363;}i:495;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12363;}i:496;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:369:"标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm 个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若  n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 ";}i:2;i:12372;}i:497;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12750;}i:498;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:12751;}i:499;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:12751;}i:500;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12751;}i:501;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:4:"\nml";}i:2;i:12761;}i:502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12774;}i:503;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12775;}i:504;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12775;}i:505;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:113:"如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 ";}i:2;i:12784;}i:506;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12906;}i:507;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:12907;}i:508;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:12907;}i:509;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12907;}i:510;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\un";}i:2;i:12917;}i:511;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:12929;}i:512;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:12930;}i:513;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:12930;}i:514;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:126:"匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。 ";}i:2;i:12939;}i:515;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:13074;}i:516;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:13075;}i:517;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:13075;}i:2;i:13075;}i:518;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13077;}i:519;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"建立正则表达式";i:1;i:2;i:2;i:13077;}i:2;i:13077;}i:520;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13077;}i:521;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13077;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与操作符将小的表达式结合在一起来创建更大的表达式。 ";}i:2;i:13110;}i:523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13285;}i:524;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13285;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"可以通过在一对分隔符之间放入表达式模式的各种组件来构造一个正则表达式。对 JScript 而言，分隔符为一对正斜杠 (/) 字符。例如：";}i:2;i:13287;}i:526;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13464;}i:527;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:12:"/expression/";}i:2;i:13464;}i:528;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13464;}i:529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"对 VBScript 而言，则采用一对引号 (";}i:2;i:13481;}i:530;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:13526;}i:531;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:13527;}i:532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:") 来确定正则表达式的边界。例如：";}i:2;i:13528;}i:533;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13576;}i:534;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:12:""expression"";}i:2;i:13576;}i:535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13576;}i:536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"在上面所示的两个示例中，正则表达式模式 (expression) 均存储在RegExp 对象的Pattern 属性中。";}i:2;i:13593;}i:537;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13712;}i:538;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13712;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。";}i:2;i:13714;}i:540;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13855;}i:541;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13858;}i:542;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"优先权顺序";i:1;i:2;i:2;i:13858;}i:2;i:13858;}i:543;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:13858;}i:544;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13858;}i:545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"在构造正则表达式之后，就可以象数学表达式一样来求值，也就是说，可以从左至右并按照一个优先权顺序来求值。 ";}i:2;i:13885;}i:546;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14039;}i:547;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14039;}i:548;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"下表从最高优先级到最低优先级列出各种正则表达式操作符的优先权顺序：";}i:2;i:14041;}i:549;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14141;}i:550;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:6;i:2;i:14142;}i:2;i:14141;}i:551;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:14141;}i:552;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14141;}i:553;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:14141;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"  操作符  ";}i:2;i:14143;}i:555;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:14156;}i:556;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:14156;}i:557;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  描述  ";}i:2;i:14157;}i:558;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:14167;}i:559;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14169;}i:560;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:14169;}i:561;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14169;}i:562;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14169;}i:563;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:14179;}i:564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14189;}i:565;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14190;}i:566;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14190;}i:567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"转义符 ";}i:2;i:14191;}i:568;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14201;}i:569;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14202;}i:570;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14202;}i:571;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14202;}i:572;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:18:"(), (?:), (?=), []";}i:2;i:14212;}i:573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14239;}i:574;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14240;}i:575;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14240;}i:576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"圆括号和方括号 ";}i:2;i:14241;}i:577;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14263;}i:578;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14264;}i:579;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14264;}i:580;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14264;}i:581;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:25:"*, +, ?, {n}, {n,}, {n,m}";}i:2;i:14274;}i:582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14308;}i:583;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14309;}i:584;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14309;}i:585;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"限定符 ";}i:2;i:14310;}i:586;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14320;}i:587;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14321;}i:588;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14321;}i:589;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14321;}i:590;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:23:"^, $, \anymetacharacter";}i:2;i:14331;}i:591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14363;}i:592;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14364;}i:593;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14364;}i:594;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"位置和顺序 ";}i:2;i:14365;}i:595;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14381;}i:596;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14382;}i:597;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:14382;}i:598;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14382;}i:599;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"|";}i:2;i:14392;}i:600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:14402;}i:601;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14403;}i:602;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:14403;}i:603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"“或”操作 ";}i:2;i:14404;}i:604;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:14420;}i:605;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:14421;}i:606;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:14421;}i:2;i:14421;}i:607;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14422;}i:608;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"普通字符";i:1;i:2;i:2;i:14422;}i:2;i:14422;}i:609;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:14422;}i:610;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14422;}i:611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"普通字符由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。 ";}i:2;i:14446;}i:612;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14639;}i:613;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14639;}i:614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"最简单的正则表达式是一个单独的普通字符，可以匹配所搜索字符串中的该字符本身。例如，单字符模式 'A' 可以匹配所搜索字符串中任何位置出现的字母 'A'。这里有一些单字符正则表达式模式的示例：";}i:2;i:14641;}i:615;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14914;}i:616;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:13:"
/a/
/7/
/M/
";i:1;N;i:2;N;}i:2;i:14914;}i:617;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14914;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"等价的 VBScript 单字符正则表达式为：";}i:2;i:14936;}i:619;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14991;}i:620;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:13:"
"a"
"7"
"M"
";i:1;N;i:2;N;}i:2;i:14991;}i:621;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14991;}i:622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"可以将多个单字符组合在一起得到一个较大的表达式。例如，下面的 JScript 正则表达式不是别的，就是通过组合单字符表达式 'a'、'7'以及 'M' 所创建出来的一个表达式。 ";}i:2;i:15013;}i:623;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15242;}i:624;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:7:"
/a7M/
";i:1;N;i:2;N;}i:2;i:15242;}i:625;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15242;}i:626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"等价的 VBScript 表达式为：";}i:2;i:15258;}i:627;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15298;}i:628;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:7:"
"a7M"
";i:1;N;i:2;N;}i:2;i:15298;}i:629;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15298;}i:630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"请注意这里没有连接操作符。所需要做的就是将一个字符放在了另一个字符后面。";}i:2;i:15314;}i:631;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15422;}i:632;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15424;}i:633;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"特殊字符";i:1;i:2;i:2;i:15424;}i:2;i:15424;}i:634;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:15424;}i:635;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15424;}i:636;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"有不少元字符在试图对其进行匹配时需要进行特殊的处理。要匹配这些特殊字符，必须首先将这些字符转义，也就是在前面使用一个反斜杠 (";}i:2;i:15448;}i:637;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:15641;}i:638;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:")。下表给出了这些特殊字符及其含义：";}i:2;i:15651;}i:639;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15704;}i:640;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:12;i:2;i:15705;}i:2;i:15704;}i:641;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:15704;}i:642;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15704;}i:643;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:15704;}i:644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"  特殊字符  ";}i:2;i:15706;}i:645;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:15722;}i:646;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:15722;}i:647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  说明  ";}i:2;i:15723;}i:648;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:15733;}i:649;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15734;}i:650;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:15734;}i:651;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15734;}i:652;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:15734;}i:653;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"$";}i:2;i:15744;}i:654;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:15754;}i:655;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15755;}i:656;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:15755;}i:657;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:166:"匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。 ";}i:2;i:15764;}i:658;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15939;}i:659;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15940;}i:660;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15940;}i:661;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:15940;}i:662;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"( )";}i:2;i:15950;}i:663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:15962;}i:664;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15963;}i:665;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:15963;}i:666;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:140:"标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。 ";}i:2;i:15972;}i:667;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16121;}i:668;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16122;}i:669;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16122;}i:670;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16122;}i:671;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"*";}i:2;i:16132;}i:672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16142;}i:673;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16143;}i:674;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16143;}i:675;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:82:"匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。 ";}i:2;i:16152;}i:676;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16243;}i:677;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16244;}i:678;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16244;}i:679;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16244;}i:680;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"+";}i:2;i:16254;}i:681;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16264;}i:682;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16265;}i:683;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16265;}i:684;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:82:"匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。 ";}i:2;i:16274;}i:685;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16365;}i:686;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16366;}i:687;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16366;}i:688;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16366;}i:689;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:".";}i:2;i:16376;}i:690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16386;}i:691;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16387;}i:692;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16387;}i:693;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:77:"匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。 ";}i:2;i:16396;}i:694;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16482;}i:695;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16483;}i:696;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16483;}i:697;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16483;}i:698;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"[";}i:2;i:16493;}i:699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:16503;}i:700;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16505;}i:701;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16505;}i:702;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:73:"标记一个中括号表达式的开始。要匹配 [，请使用 \[。  ";}i:2;i:16514;}i:703;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16596;}i:704;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16597;}i:705;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16597;}i:706;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16597;}i:707;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"?";}i:2;i:16607;}i:708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16617;}i:709;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16618;}i:710;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16618;}i:711;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:118:"匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 ";}i:2;i:16627;}i:712;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16754;}i:713;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16755;}i:714;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16755;}i:715;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16755;}i:716;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:16765;}i:717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:16775;}i:718;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16776;}i:719;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:16776;}i:720;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:212:"将下一个字符标记为或特殊字符、或原义字符、或后向引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。 ";}i:2;i:16785;}i:721;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17006;}i:722;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17007;}i:723;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17007;}i:724;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17007;}i:725;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"^";}i:2;i:17017;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:17027;}i:727;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17028;}i:728;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17028;}i:729;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:163:"匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。 ";}i:2;i:17037;}i:730;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17209;}i:731;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17210;}i:732;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17210;}i:733;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17210;}i:734;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"{";}i:2;i:17220;}i:735;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:17230;}i:736;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17231;}i:737;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17231;}i:738;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:66:"标记限定符表达式的开始。要匹配 {，请使用 \{。 ";}i:2;i:17240;}i:739;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17315;}i:740;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17316;}i:741;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17316;}i:742;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17316;}i:743;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"|";}i:2;i:17326;}i:744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:17336;}i:745;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17337;}i:746;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17337;}i:747;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:66:"指明两项之间的一个选择。要匹配 |，请使用 \|。 ";}i:2;i:17346;}i:748;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17421;}i:749;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17422;}i:750;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:17422;}i:2;i:17422;}i:751;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17425;}i:752;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"非打印字符";i:1;i:2;i:2;i:17425;}i:2;i:17425;}i:753;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:17425;}i:754;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17425;}i:755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"有不少很有用的非打印字符，偶尔必须使用。下表显示了用来表示这些非打印字符的转义序列：";}i:2;i:17452;}i:756;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17579;}i:757;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:9;i:2;i:17580;}i:2;i:17579;}i:758;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:17579;}i:759;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17579;}i:760;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:17579;}i:761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  字符  ";}i:2;i:17581;}i:762;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:17591;}i:763;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:17591;}i:764;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  含义  ";}i:2;i:17592;}i:765;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:17602;}i:766;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17604;}i:767;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:17604;}i:768;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17604;}i:769;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17604;}i:770;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:4:"\cx ";}i:2;i:17614;}i:771;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17627;}i:772;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17627;}i:773;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:177:"匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 ";}i:2;i:17636;}i:774;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17822;}i:775;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17823;}i:776;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17823;}i:777;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17823;}i:778;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\f ";}i:2;i:17833;}i:779;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17845;}i:780;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17845;}i:781;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个换页符。等价于 \x0c 和 \cL。 ";}i:2;i:17854;}i:782;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17913;}i:783;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:17914;}i:784;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:17914;}i:785;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17914;}i:786;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\n ";}i:2;i:17924;}i:787;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:17936;}i:788;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:17936;}i:789;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个换行符。等价于 \x0a 和 \cJ。 ";}i:2;i:17945;}i:790;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18004;}i:791;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18005;}i:792;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:18005;}i:793;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18005;}i:794;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\r ";}i:2;i:18015;}i:795;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18027;}i:796;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18027;}i:797;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个回车符。等价于 \x0d 和 \cM。 ";}i:2;i:18036;}i:798;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18095;}i:799;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18096;}i:800;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:18096;}i:801;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18096;}i:802;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\s ";}i:2;i:18106;}i:803;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18118;}i:804;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18118;}i:805;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:99:"匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 ";}i:2;i:18127;}i:806;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18235;}i:807;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18236;}i:808;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:18236;}i:809;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18236;}i:810;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\S ";}i:2;i:18246;}i:811;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18258;}i:812;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18258;}i:813;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:58:"匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 ";}i:2;i:18267;}i:814;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18334;}i:815;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18335;}i:816;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:18335;}i:817;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18335;}i:818;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\t ";}i:2;i:18345;}i:819;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18357;}i:820;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18357;}i:821;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:50:"匹配一个制表符。等价于 \x09 和 \cI。 ";}i:2;i:18366;}i:822;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18425;}i:823;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18426;}i:824;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:18426;}i:825;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18426;}i:826;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\v ";}i:2;i:18436;}i:827;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18448;}i:828;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:18448;}i:829;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:56:"匹配一个垂直制表符。等价于 \x0b 和 \cK。 ";}i:2;i:18457;}i:830;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:18522;}i:831;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:18523;}i:832;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:18523;}i:2;i:18523;}i:833;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18523;}i:834;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"句点 (.) 匹配一个字符串中任何单个的打印或非打印字符，除了换行符 (";}i:2;i:18525;}i:835;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:18627;}i:836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"n) 之外。下面的 JScript 正则表达式可以匹配 'aac'、'abc'、'acc'、'adc'如此等等，同样也可以匹配 'a1c'、'a2c'、a-c'以及 a#c'： ";}i:2;i:18637;}i:837;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18797;}i:838;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:5:"/a.c/";}i:2;i:18797;}i:839;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18797;}i:840;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"等价的 VBScript 正则表达式为：";}i:2;i:18806;}i:841;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18847;}i:842;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:5:""a.c"";}i:2;i:18847;}i:843;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18847;}i:844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"如果试图匹配一个包含文件名的字符串，其中句点 (.) 是输入字符串的一部分，则可以在正则表达式中的句点前面加上一个反斜杠 (";}i:2;i:18856;}i:845;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:19036;}i:846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:") 字符来实现这一要求。举例来说，下面的 JScript 正则表达式就能匹配 'filename.ext'：";}i:2;i:19046;}i:847;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19157;}i:848;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:32:"/filename<nowiki>\</nowiki>.ext/";}i:2;i:19157;}i:849;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19157;}i:850;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"对 VBScript 而言，等价的表达式如下所示：";}i:2;i:19193;}i:851;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19249;}i:852;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:32:""filename<nowiki>\</nowiki>.ext"";}i:2;i:19249;}i:853;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19249;}i:854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:294:"这些表达式仍然是相当有限的。它们只允许匹配任何单字符。很多情况下，对从列表中匹配特殊字符十分有用。例如，如果输入文字中包含用数字表示为Chapter 1, Chapter 2诸如此类的章节标题，你可能需要找到这些章节标题。 ";}i:2;i:19285;}i:855;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19579;}i:856;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19579;}i:857;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:1;i:1;s:2:"**";}i:2;i:1;i:3;s:2:"**";}i:2;i:19581;}i:858;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:3;i:1;s:15:"括号表达式";}i:2;i:3;i:3;s:15:"括号表达式";}i:2;i:19583;}i:859;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:22:"markdowku_boldasterisk";i:1;a:2:{i:0;i:4;i:1;s:2:"**";}i:2;i:4;i:3;s:2:"**";}i:2;i:19598;}i:860;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19600;}i:861;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19600;}i:862;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:"可以在一个方括号 ([ 和 ]) 中放入一个或多个单字符，来创建一个待匹配的列表。如果字符被放入括号中括起来，则该列表称为括号表达式。括号内和其他任何地方一样，普通字符代表其本身，也就是说，它们匹配输入文字中出现的一处自己。大多数特殊字符在位于括号表达式中时都将失去其含义。这里有一些例外： ";}i:2;i:19602;}i:863;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20023;}i:864;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20023;}i:865;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20023;}i:866;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20023;}i:867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"']' 字符如果不是第一项，则将结束一个列表。要在列表中匹配 ']' 字符，请将其放在第一项，紧跟在开始的 '[' 后面。 ";}i:2;i:20027;}i:868;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20183;}i:869;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20183;}i:870;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20183;}i:871;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20183;}i:872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"'";}i:2;i:20187;}i:873;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:20196;}i:874;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"' 仍然作为转义符。要匹配 '";}i:2;i:20206;}i:875;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:20251;}i:876;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"' 字符，请使用 '";}i:2;i:20261;}i:877;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:20291;}i:878;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:1:"\";}i:2;i:20309;}i:879;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"'。 ";}i:2;i:20319;}i:880;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20324;}i:881;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20324;}i:882;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20324;}i:883;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20324;}i:884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:238:"括号表达式中所包含的字符只匹配该括号表达式在正则表达式中所处位置的一个单字符。下面的 JScript 正则表达式可以匹配 'Chapter 1'、'Chapter 2'、'Chapter 3'、'Chapter 4' 以及 'Chapter 5'：";}i:2;i:20325;}i:885;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20564;}i:886;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:17:"/Chapter [12345]/";}i:2;i:20564;}i:887;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20564;}i:888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"在 VBScript 中要匹配同样的章节标题，请使用下面的表达式：";}i:2;i:20585;}i:889;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20665;}i:890;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:17:""Chapter [12345]"";}i:2;i:20665;}i:891;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20665;}i:892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:"请注意单词 'Chapter' 及后面的空格与括号内的字符的位置关系是固定的。因此，括号表达式只用来指定满足紧跟在单词 'Chapter' 和一个空格之后的单字符位置的字符集合。这里是第九个字符位置。";}i:2;i:20686;}i:893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20942;}i:894;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20942;}i:895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"如果希望使用范围而不是字符本身来表示待匹配的字符，则可以使用连字符将该范围的开始和结束字符分开。每个字符的字符值将决定其在一个范围内的相对顺序。下面的 JScript 正则表达式包含了一个等价于上面所示的括号列表的范围表达式。";}i:2;i:20944;}i:896;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21266;}i:897;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:15:"/Chapter [1-5]/";}i:2;i:21266;}i:898;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21266;}i:899;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"VBScipt 中相同功能的表达式如下所示：";}i:2;i:21285;}i:900;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21336;}i:901;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:15:""Chapter [1-5]"";}i:2;i:21336;}i:902;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21336;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:"如果以这种方式指定范围，则开始和结束值都包括在该范围内。有一点特别需要注意的是，在 Unicode 排序中起始值一定要在结束值之前。";}i:2;i:21355;}i:904;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21535;}i:905;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21535;}i:906;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"如果想在括号表达式中包括连字符，则必须使用下述方法之一： ";}i:2;i:21537;}i:907;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21623;}i:908;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:21623;}i:909;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:21623;}i:910;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:21623;}i:911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"使用反斜杠将其转义： ";}i:2;i:21627;}i:912;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:21658;}i:913;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:21658;}i:914;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:21658;}i:915;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"[<nowiki>\</nowiki>-]";}i:2;i:21659;}i:916;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:21684;}i:917;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:21684;}i:918;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:21684;}i:919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"将连字符放在括号列表的开始和结束位置。下面的表达式能匹配所有的小写字母和连字符： ";}i:2;i:21688;}i:920;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:21809;}i:921;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:21809;}i:922;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:21809;}i:923;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"[-a-z]
[a-z-]";}i:2;i:21810;}i:924;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:21829;}i:925;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:21829;}i:926;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:21829;}i:927;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"创建一个范围，其中开始字符的值小于连字符，而结束字符的值等于或大于连字符。下面两个正则表达式都满足这一要求： ";}i:2;i:21833;}i:928;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:21996;}i:929;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:21996;}i:930;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:21996;}i:931;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:11:"[!--]
[!-~]";}i:2;i:21997;}i:932;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21997;}i:933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:291:"同样，通过在列表开始处放置一个插入符(^)，就可以查找所有不在列表或范围中的字符。如果该插入符出现在列表的其他位置，则匹配其本身，没有任何特殊含义。下面的 JScript 正则表达式匹配章节号大于 5 的章节标题：";}i:2;i:22015;}i:934;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22307;}i:935;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"/Chapter [^12345]/";}i:2;i:22307;}i:936;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22307;}i:937;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"对 VBScript 则使用：";}i:2;i:22329;}i:938;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22355;}i:939;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:""Chapter [^12345]"";}i:2;i:22355;}i:940;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22355;}i:941;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"在上面所示的示例中，表达式将匹配第九个位置处除1, 2, 3, 4, or 5 之外的任何数字字符。因此， 'Chapter 7' 为一个匹配，同样 'Chapter 9' 也是如此。 ";}i:2;i:22377;}i:942;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22568;}i:943;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22568;}i:944;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"上面的表达式可以使用连字符 (-) 表示。对 JScript 为：";}i:2;i:22570;}i:945;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22642;}i:946;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:16:"/Chapter [^1-5]/";}i:2;i:22642;}i:947;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22642;}i:948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"或者，对 VBScript 为：";}i:2;i:22662;}i:949;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22691;}i:950;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:16:""Chapter [^1-5]"";}i:2;i:22691;}i:951;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22691;}i:952;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"括号表达式的典型用法是指定对任何大写或小写字母字符或任何数字的匹配。下面的 JScript 表达式给出了这一匹配：";}i:2;i:22711;}i:953;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22865;}i:954;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"/[A-Za-z0-9]/";}i:2;i:22865;}i:955;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22865;}i:956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"等价的 VBScript 表达式为：";}i:2;i:22882;}i:957;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22917;}i:958;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:""[A-Za-z0-9]"";}i:2;i:22917;}i:959;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22935;}i:960;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"限定符";i:1;i:2;i:2;i:22935;}i:2;i:22935;}i:961;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:22935;}i:962;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22935;}i:963;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"有时候不知道要匹配多少字符。为了能适应这种不确定性，正则表达式支持限定符的概念。这些限定符可以指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。";}i:2;i:22956;}i:964;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23184;}i:965;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23184;}i:966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"下表给出了各种限定符及其含义的说明：";}i:2;i:23186;}i:967;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23241;}i:968;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:7;i:2;i:23242;}i:2;i:23241;}i:969;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:23241;}i:970;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23241;}i:971;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23241;}i:972;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  字符  ";}i:2;i:23243;}i:973;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:23253;}i:974;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23253;}i:975;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  描述  ";}i:2;i:23254;}i:976;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:23264;}i:977;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23266;}i:978;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:23266;}i:979;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23266;}i:980;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23266;}i:981;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"* ";}i:2;i:23276;}i:982;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23287;}i:983;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23287;}i:984;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:107:"匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。 ";}i:2;i:23296;}i:985;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23412;}i:986;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23413;}i:987;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23413;}i:988;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23413;}i:989;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"+  ";}i:2;i:23423;}i:990;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23435;}i:991;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23435;}i:992;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:132:"匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。 ";}i:2;i:23444;}i:993;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23585;}i:994;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23586;}i:995;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23586;}i:996;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23586;}i:997;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"?  ";}i:2;i:23596;}i:998;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23608;}i:999;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23608;}i:1000;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:128:"匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。 ";}i:2;i:23617;}i:1001;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23754;}i:1002;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23755;}i:1003;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23755;}i:1004;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23755;}i:1005;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:4:"{n} ";}i:2;i:23765;}i:1006;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23778;}i:1007;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23778;}i:1008;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:139:"n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。 ";}i:2;i:23787;}i:1009;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23935;}i:1010;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23936;}i:1011;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23936;}i:1012;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23936;}i:1013;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:6:"{n,}  ";}i:2;i:23946;}i:1014;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23961;}i:1015;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23961;}i:1016;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:189:"n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 ";}i:2;i:23970;}i:1017;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:24168;}i:1018;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:24169;}i:1019;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:24169;}i:1020;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:24169;}i:1021;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:7:"{n,m}  ";}i:2;i:24179;}i:1022;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:24195;}i:1023;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:24195;}i:1024;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:224:"m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。刘， "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 ";}i:2;i:24204;}i:1025;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:24437;}i:1026;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:24438;}i:1027;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:24438;}i:2;i:24438;}i:1028;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24438;}i:1029;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:266:"对一个很大的输入文档而言，章节数很轻易就超过九章，因此需要有一种方法来处理两位数或者三位数的章节号。限定符就提供了这个功能。下面的JScript 正则表达式可以匹配具有任何位数的章节标题：";}i:2;i:24441;}i:1030;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24708;}i:1031;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"/Chapter [1-9][0-9]*/";}i:2;i:24708;}i:1032;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24708;}i:1033;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"下面的 VBScript 正则表达式执行同样的匹配：";}i:2;i:24733;}i:1034;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24792;}i:1035;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:""Chapter [1-9][0-9]*"";}i:2;i:24792;}i:1036;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24792;}i:1037;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:"请注意限定符出现在范围表达式之后。因此，它将应用于所包含的整个范围表达式，在本例中，只指定了从 0 到 9 的数字。";}i:2;i:24817;}i:1038;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24979;}i:1039;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24979;}i:1040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"这里没有使用 '+' 限定符，因为第二位或后续位置上并不一定需要一个数字。同样也没有使用 '?' 字符，因为这将把章节数限制为只有两位数字。在 'Chapter' 和空格字符之后至少要匹配一个数字。";}i:2;i:24981;}i:1041;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25236;}i:1042;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25236;}i:1043;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"如果已知章节数限制只有99 章，则可以使用下面的 JScript 表达式来指定至少有一位数字，但不超过两个数字。";}i:2;i:25238;}i:1044;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25383;}i:1045;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:20:"/Chapter [0-9]{1,2}/";}i:2;i:25383;}i:1046;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25383;}i:1047;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"对 VBScript 可以使用下述正则表达式：";}i:2;i:25407;}i:1048;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25457;}i:1049;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:20:""Chapter [0-9]{1,2}"";}i:2;i:25457;}i:1050;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25457;}i:1051;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:"上述表达式的缺点是如果有一个章节号大于 99，它仍只会匹配前两位数字。另一个缺点是某些人可以创建一个 Chapter 0，而且仍能匹配。一个更好的用来匹配两位数的 JScript 表达式如下：";}i:2;i:25481;}i:1052;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25726;}i:1053;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"/Chapter [1-9][0-9]?/";}i:2;i:25726;}i:1054;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25726;}i:1055;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"或者";}i:2;i:25751;}i:1056;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25758;}i:1057;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"/Chapter [1-9][0-9]{0,1}/";}i:2;i:25758;}i:1058;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25758;}i:1059;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"对 VBScript 而言，下述表达式与上面等价：";}i:2;i:25787;}i:1060;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25843;}i:1061;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:""Chapter [1-9][0-9]?"";}i:2;i:25843;}i:1062;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25843;}i:1063;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"或者";}i:2;i:25868;}i:1064;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25875;}i:1065;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:""Chapter [1-9][0-9]{0,1}"";}i:2;i:25875;}i:1066;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25875;}i:1067;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"'*'、 '+'和 '?' 限定符都称之为贪婪的，也就是说，他们尽可能多地匹配文字。有时这根本就不是所希望发生的情况。有时则正好希望最小匹配。 ";}i:2;i:25904;}i:1068;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26094;}i:1069;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26094;}i:1070;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"例如，你可能要搜索一个 ";}i:2;i:26096;}i:1071;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:26130;}i:1072;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" 文档来查找一处包含在 H1 标记中的章节标题。在文档中该文字可能具有如下形式：";}i:2;i:26134;}i:1073;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26245;}i:1074;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:58:"<H1>Chapter 1 – Introduction to Regular Expressions</H1>";}i:2;i:26245;}i:1075;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26245;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"下面的表达式匹配从开始的小于号 (<) 到 H1 标记结束处的大于号之间的所有内容。";}i:2;i:26307;}i:1077;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26416;}i:1078;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:6:"/<.*>/";}i:2;i:26416;}i:1079;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26416;}i:1080;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" VBScript 的正则表达式为：";}i:2;i:26426;}i:1081;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26461;}i:1082;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:6:""<.*>"";}i:2;i:26461;}i:1083;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26461;}i:1084;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"如果所要匹配的就是开始的 H1 标记，则下述非贪婪地表达式就只匹配 <H1>。";}i:2;i:26471;}i:1085;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26571;}i:1086;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:"/<.*?>/";}i:2;i:26571;}i:1087;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26571;}i:1088;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"或者";}i:2;i:26582;}i:1089;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26589;}i:1090;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:""<.*?>"";}i:2;i:26589;}i:1091;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26589;}i:1092;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"通过在 '*'、 '+' 或 '?' 限定符后放置 '?'，该表达式就从贪婪匹配转为了非贪婪或最小匹配。";}i:2;i:26600;}i:1093;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26720;}i:1094;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26722;}i:1095;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"定位符";i:1;i:2;i:2;i:26722;}i:2;i:26722;}i:1096;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:26722;}i:1097;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26722;}i:1098;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:380:"到现在为止，所看到的示例都只考虑查找任何地方出现的章节标题。出现的任何一个字符串 'Chapter' 后跟一个空格和一个数字可能是一个真正的章节标题，也可能是对其他章节的交叉引用。由于真正的章节标题总是出现在一行的开始，因此需要设计一个方法只查找标题而不查找交叉引用。";}i:2;i:26743;}i:1099;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27123;}i:1100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27123;}i:1101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"定位符提供了这个功能。定位符可以将一个正则表达式固定在一行的开始或结束。也可以创建只在单词内或只在单词的开始或结尾处出现的正则表达式。下表包含了正则表达式及其含义的列表：";}i:2;i:27125;}i:1102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27381;}i:1103;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:27382;}i:2;i:27381;}i:1104;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:27381;}i:1105;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27381;}i:1106;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:27381;}i:1107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  字符  ";}i:2;i:27383;}i:1108;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27393;}i:1109;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:27393;}i:1110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  描述  ";}i:2;i:27394;}i:1111;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27404;}i:1112;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27405;}i:1113;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:27405;}i:1114;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27405;}i:1115;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27405;}i:1116;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"^ ";}i:2;i:27415;}i:1117;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27426;}i:1118;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27426;}i:1119;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:136:"匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。 ";}i:2;i:27435;}i:1120;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27580;}i:1121;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27581;}i:1122;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27581;}i:1123;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27581;}i:1124;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"$ ";}i:2;i:27591;}i:1125;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27602;}i:1126;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27602;}i:1127;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:135:"匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。 ";}i:2;i:27611;}i:1128;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27755;}i:1129;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27756;}i:1130;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27756;}i:1131;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27756;}i:1132;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\b ";}i:2;i:27766;}i:1133;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27778;}i:1134;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27778;}i:1135;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:70:"匹配一个单词边界，也就是指单词和空格间的位置。 ";}i:2;i:27787;}i:1136;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27866;}i:1137;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27867;}i:1138;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27867;}i:1139;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27867;}i:1140;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:3:"\B ";}i:2;i:27877;}i:1141;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27889;}i:1142;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27889;}i:1143;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:25:"匹配非单词边界。 ";}i:2;i:27898;}i:1144;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27932;}i:1145;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27933;}i:1146;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:27933;}i:2;i:27933;}i:1147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27933;}i:1148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"不能对定位符使用限定符。因为在一个换行符或者单词边界的前面或后面不会有连续多个位置，因此诸如 '^*' 的表达式是不允许的。";}i:2;i:27936;}i:1149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28110;}i:1150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28110;}i:1151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"要匹配一行文字开始位置的文字，请在正则表达式的开始处使用 '^' 字符。不要把 '^' 的这个语法与其在括号表达式中的语法弄混。它们的语法根本不同。 ";}i:2;i:28112;}i:1152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28315;}i:1153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28315;}i:1154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:"要匹配一行文字结束位置的文字，请在正则表达式的结束处使用 '$' 字符。";}i:2;i:28317;}i:1155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28415;}i:1156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28415;}i:1157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"要在查找章节标题时使用定位符，下面的 JScript 正则表达式将匹配位于一行的开始处最多有两个数字的章节标题：";}i:2;i:28417;}i:1158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28568;}i:1159;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:26:"/^Chapter [1-9][0-9]{0,1}/";}i:2;i:28568;}i:1160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28568;}i:1161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"VBScript 中相同功能的正则表达式如下：";}i:2;i:28598;}i:1162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28650;}i:1163;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:26:""^Chapter [1-9][0-9]{0,1}"";}i:2;i:28650;}i:1164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28650;}i:1165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:339:"一个真正的章节标题不仅出现在一行的开始，而且这一行中也仅有这一个内容，因此，它必然也位于一行的结束。下面的表达式确保所指定的匹配只匹配章节而不会匹配交叉引用。它是通过创建一个只匹配一行文字的开始和结束位置的正则表达式来实现的。";}i:2;i:28680;}i:1166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29020;}i:1167;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:27:"/^Chapter [1-9][0-9]{0,1}$/";}i:2;i:29020;}i:1168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29020;}i:1169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"对 VBScript 则使用：";}i:2;i:29051;}i:1170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29077;}i:1171;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:27:""^Chapter [1-9][0-9]{0,1}$"";}i:2;i:29077;}i:1172;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29077;}i:1173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:305:"匹配单词边界有少许不同，但却给正则表达式增加了一个非常重要的功能。单词边界就是单词和空格之间的位置。非单词边界就是其他任何位置。下面的 JScript 表达式将匹配单词 'Chapter' 的前三个字符，因为它们出现在单词边界后：";}i:2;i:29108;}i:1174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29414;}i:1175;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:"/\bCha/";}i:2;i:29414;}i:1176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29414;}i:1177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"对 VBScript 为：";}i:2;i:29425;}i:1178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29445;}i:1179;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:""\bCha"";}i:2;i:29445;}i:1180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29445;}i:1181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:323:"这里 '\b' 操作符的位置很关键。如果它位于要匹配的字符串的开始，则将查找位于单词开头处的匹配；如果它位于改字符串的末尾，则查找位于单词结束处的匹配。例如，下面的表达式将匹配单词 'Chapter' 中的 'ter'，因为它出现在单词边界之前：";}i:2;i:29456;}i:1182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29780;}i:1183;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:"/ter\b/";}i:2;i:29780;}i:1184;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29780;}i:1185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"以及";}i:2;i:29791;}i:1186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29798;}i:1187;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:""ter\b"";}i:2;i:29798;}i:1188;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29798;}i:1189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"下面的表达式将匹配 'apt'，因为它位于 'Chapter' 中间，但不会匹配 'aptitude' 中的'apt'：";}i:2;i:29809;}i:1190;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29922;}i:1191;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:"/\Bapt/";}i:2;i:29922;}i:1192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29922;}i:1193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"以及";}i:2;i:29933;}i:1194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29940;}i:1195;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:""\Bapt"";}i:2;i:29940;}i:1196;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29940;}i:1197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"这是因为在单词 'Chapter' 中 'apt' 出现在非单词边界位置，而在单词 'aptitude' 中位于单词边界位置。非单词边界操作符的位置不重要，因为匹配与一个单词的开头或结尾无关。";}i:2;i:29951;}i:1198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30179;}i:1199;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:30181;}i:1200;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"选择与编组";i:1;i:2;i:2;i:30181;}i:2;i:30181;}i:1201;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:30181;}i:1202;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30181;}i:1203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:463:"选择允许使用 '|' 字符来在两个或多个候选项中进行选择。通过扩展章节标题的正则表达式，可以将其扩充为不仅仅适用于章节标题的表达式。不过，这可没有想象的那么直接。在使用选择时，将匹配'|' 字符每边最可能的表达式。你可能认为下面的 JScript 和 VBScript 表达式将匹配位于一行的开始和结束位置且后跟一个或两个数字的 'Chapter' 或 'Section'：";}i:2;i:30208;}i:1204;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30672;}i:1205;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:71:"/^Chapter|Section [1-9][0-9]{0,1}$/
"^Chapter|Section [1-9][0-9]{0,1}$"";}i:2;i:30672;}i:1206;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30672;}i:1207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:513:"不幸的是，真正的情况是上面所示的正则表达式要么匹配位于一行开始处的单词 'Chapter'，要么匹配一行结束处的后跟任何数字的 'Section'。如果输入字符串为 'Chapter 22'，上面的表达式将只匹配单词 'Chapter'。如果输入字符串为 'Section 22'，则该表达式将匹配 'Section 22'。但这种结果不是我们此处的目的，因此必须有一种办法来使正则表达式对于所要做的更易于响应，而且确实也有这种方法。";}i:2;i:30749;}i:1208;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31262;}i:1209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31262;}i:1210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:445:"可以使用圆括号来限制选择的范围，也就是说明确该选择只适用于这两个单词 'Chapter' 和 'Section'。不过，圆括号同样也是难处理的，因为它们也用来创建子表达式，有些内容将在后面关于子表达式的部分介绍。通过采用上面所示的正则表达式并在适当位置添加圆括号，就可以使该正则表达式既可以匹配 'Chapter 1'，也可以匹配 'Section 3'。 ";}i:2;i:31264;}i:1211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31709;}i:1212;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31709;}i:1213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"下面的正则表达式使用圆括号将 'Chapter' 和 'Section' 组成一组，所以该表达式才能正确工作。对 JScript 为：";}i:2;i:31711;}i:1214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31851;}i:1215;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:37:"/^(Chapter|Section) [1-9][0-9]{0,1}$/";}i:2;i:31851;}i:1216;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31851;}i:1217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"对 VBScript 为：";}i:2;i:31892;}i:1218;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31912;}i:1219;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:37:""^(Chapter|Section) [1-9][0-9]{0,1}$"";}i:2;i:31912;}i:1220;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31912;}i:1221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"这些表达式工作正确，只是产生了一个有趣的副产品。在 'Chapter|Section' 两边放置圆括号建立了适当的编组，但也导致两个待匹配单词之一都被捕获供今后使用。由于在上面所示的表达式中只有一组圆括号，因此只能有一个捕获的 submatch。可以使用 VBScript 的Submatches 集合或者JScript 中RegExp 对象的 $1-$9 属性来引用这个子匹配。";}i:2;i:31953;}i:1222;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32381;}i:1223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32381;}i:1224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:415:"有时捕获一个子匹配是所希望的，有时则是不希望的。在说明所示的示例中，真正想做的就是使用圆括号对单词 'Chapter' 或 'Section' 之间的选择编组。并不希望在后面再引用该匹配。实际上，除非真的是需要捕获子匹配，否则请不要使用。由于不需要花时间和内存来存储那些子匹配，这种正则表达式的效率将更高。";}i:2;i:32383;}i:1225;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32798;}i:1226;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32798;}i:1227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:"可以在正则表达式模式圆括号内部的前面使用 '?:'来防止存储该匹配供今后使用。对上面所示正则表达式的下述修改提供了免除子匹配存储的相同功能。对 JScript：";}i:2;i:32800;}i:1228;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33015;}i:1229;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:39:"/^(?:Chapter|Section) [1-9][0-9]{0,1}$/";}i:2;i:33015;}i:1230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33015;}i:1231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"对 VBScript：";}i:2;i:33058;}i:1232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33074;}i:1233;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:39:""^(?:Chapter|Section) [1-9][0-9]{0,1}$"";}i:2;i:33074;}i:1234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33074;}i:1235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:347:"除了 '?:' 元字符，还有两个非捕获元字符用于称之为预查的匹配。一个为正向预查，用 ?= 表示， 在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串。一个为负向预查，用 '?!' 表示，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。";}i:2;i:33117;}i:1236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33464;}i:1237;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33464;}i:1238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:398:"例如，假定有一个包含引用有 Windows 3.1、Windows 95、Windows 98 以及 Windows NT 的文档。进一步假设需要更新该文档，方法是查找所有对 Windows 95、Windows 98 以及 Windows NT 的引用，并将这些引用更改为 Windows 2000。可以使用下面的 JScript 正则表达式，这是一个正向预查，来匹配 Windows 95、Windows 98 以及 Windows NT：";}i:2;i:33466;}i:1239;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33865;}i:1240;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"/Windows(?=95 |98 |NT )/";}i:2;i:33865;}i:1241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33865;}i:1242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"在 VBScript 要进行同样的匹配可以使用下述表达式：";}i:2;i:33893;}i:1243;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33961;}i:1244;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:""Windows(?=95 |98 |NT )"";}i:2;i:33961;}i:1245;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33961;}i:1246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:"找到一个匹配后，紧接匹配到的文字（而不包括预查中使用的字符）就开始对下一次匹配的搜索。例如，如果上面所示的表达式匹配到 'Windows 98'，则将从 'Windows' 而不是 '98' 之后继续查找。";}i:2;i:33989;}i:1247;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34238;}i:1248;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:34241;}i:1249;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"后向引用";i:1;i:2;i:2;i:34241;}i:2;i:34241;}i:1250;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:34241;}i:1251;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34241;}i:1252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:369:"正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。请回想一下，对一个正则表达式模式或部分模式两边添加圆括号将导致这部分表达式存储到一个临时缓冲区中。可以使用非捕获元字符 '?:', '?=', or '?!' 来忽略对这部分正则表达式的保存。";}i:2;i:34265;}i:1253;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34634;}i:1254;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34634;}i:1255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:"所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 '\n' 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。 ";}i:2;i:34636;}i:1256;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34950;}i:1257;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34950;}i:1258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"后向引用一个最简单，最有用的应用是提供了确定文字中连续出现两个相同单词的位置的能力。请看下面的句子：";}i:2;i:34952;}i:1259;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35103;}i:1260;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"Is is the cost of of gasoline going up up?";}i:2;i:35103;}i:1261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35103;}i:1262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"根据所写内容，上面的句子明显存在单词多次重复的问题。如果能有一种方法无需查找每个单词的重复现象就能修改该句子就好了。下面的 JScript 正则表达式使用一个子表达式就可以实现这一功能。 ";}i:2;i:35149;}i:1263;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35412;}i:1264;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"/\b([a-z]+) \1\b/gi";}i:2;i:35412;}i:1265;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35412;}i:1266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"等价的 VBScript 表达式为：";}i:2;i:35435;}i:1267;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35470;}i:1268;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:17:""\b([a-z]+) \1\b"";}i:2;i:35470;}i:1269;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35470;}i:1270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:419:"在这个示例中，子表达式就是圆括号之间的每一项。所捕获的表达式包括一个或多个字母字符，即由'[a-z]+' 所指定的。该正则表达式的第二部分是对前面所捕获的子匹配的引用，也就是由附加表达式所匹配的第二次出现的单词。'\1'用来指定第一个子匹配。单词边界元字符确保只检测单独的单词。如果不这样，则诸如 ";}i:2;i:35491;}i:1271;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:35910;}i:1272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"is issued";}i:2;i:35911;}i:1273;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:35920;}i:1274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" 或 ";}i:2;i:35921;}i:1275;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:35926;}i:1276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"this is";}i:2;i:35927;}i:1277;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:35934;}i:1278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" 这样的短语都会被该表达式不正确地识别。 ";}i:2;i:35935;}i:1279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35994;}i:1280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35994;}i:1281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:419:"在 JScript 表达式中，正则表达式后面的全局标志 ('g') 表示该表达式将用来在输入字符串中查找尽可能多的匹配。大小写敏感性由表达式结束处的大小写敏感性标记 ('i') 指定。多行标记指定可能出现在换行符的两端的潜在匹配。对 VBScript 而言，在表达式中不能设置各种标记，但必须使用 RegExp 对象的属性来显式设置。";}i:2;i:35996;}i:1282;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36415;}i:1283;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36415;}i:1284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"使用上面所示的正则表达式，下面的 JScript 代码可以使用子匹配信息，在一个文字字符串中将连续出现两次的相同单词替换为一个相同的单词：";}i:2;i:36417;}i:1285;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36607;}i:1286;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:194:"var ss = "Is is the cost of of gasoline going up up?.\n";
var re = /\b([a-z]+) \1\b/gim;       //创建正则表达式样式.
var rv = ss.replace(re,"$1");   //用一个单词替代两个单词.";}i:2;i:36607;}i:1287;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36607;}i:1288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"最接近的等价  VBScript 代码如下：";}i:2;i:36809;}i:1289;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36854;}i:1290;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:211:"Dim ss, re, rv
ss = "Is is the cost of of gasoline going up up?." & vbNewLine
Set re = New RegExp
re.Pattern = "\b([a-z]+) \1\b"
re.Global = True
re.IgnoreCase = True
re.MultiLine = True
rv = re.Replace(ss,"$1")";}i:2;i:36854;}i:1291;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36854;}i:1292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"请注意在 VBScript 代码中，全局、大小写敏感性以及多行标记都是使用 RegExp 对象的适当属性来设置的。";}i:2;i:37083;}i:1293;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37218;}i:1294;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37218;}i:1295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"在replace 方法中使用 $1 来引用所保存的第一个子匹配。如果有多个子匹配，则可以用 $2, $3 等继续引用。";}i:2;i:37220;}i:1296;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37357;}i:1297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37357;}i:1298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"后向引用的另一个用途是将一个通用资源指示符 (";}i:2;i:37359;}i:1299;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URI";}i:2;i:37424;}i:1300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:") 分解为组件部分。假定希望将下述的URI 分解为协议 (ftp, http, etc)，域名地址以及页面/路径：";}i:2;i:37427;}i:1301;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37551;}i:1302;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:50:"http://msdn.microsoft.com:80/scripting/default.htm";}i:2;i:37551;}i:1303;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37551;}i:1304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"下面的正则表达式可以提供这个功能。对 JScript，为：";}i:2;i:37605;}i:1305;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37677;}i:1306;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:35:"/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/";}i:2;i:37677;}i:1307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37677;}i:1308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"对 VBScript 为：";}i:2;i:37716;}i:1309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37736;}i:1310;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:35:""(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)"";}i:2;i:37736;}i:1311;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37736;}i:1312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:614:"第一个附加子表达式是用来捕获该 web 地址的协议部分。该子表达式匹配位于一个冒号和两个正斜杠之前的任何单词。第二个附加子表达式捕获该地址的域名地址。该子表达式匹配不包括 '^'、 '/' 或 ':' 字符的任何字符序列。第三个附加子表达式捕获网站端口号码，如果指定了该端口号。该子表达式匹配后跟一个冒号的零或多个数字。最后，第四个附加子表达式捕获由该 web 地址指定的路径以及\或者页面信息。该子表达式匹配一个和多个除'#' 或空格之外的字符。";}i:2;i:37775;}i:1313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38389;}i:1314;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38389;}i:1315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"将该正则表达式应用于上面所示的 ";}i:2;i:38391;}i:1316;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URI";}i:2;i:38437;}i:1317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" 后，子匹配包含下述内容：";}i:2;i:38440;}i:1318;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38478;}i:1319;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:126:"RegExp.$1 包含 "http"
RegExp.$2 包含 "msdn.microsoft.com"
RegExp.$3 包含 ":80"
RegExp.$4 包含 "/scripting/default.htm"";}i:2;i:38478;}i:1320;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38478;}i:1321;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:38478;}}